/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bicycle } from "./Bicycle";
import { BicycleCountArgs } from "./BicycleCountArgs";
import { BicycleFindManyArgs } from "./BicycleFindManyArgs";
import { BicycleFindUniqueArgs } from "./BicycleFindUniqueArgs";
import { CreateBicycleArgs } from "./CreateBicycleArgs";
import { UpdateBicycleArgs } from "./UpdateBicycleArgs";
import { DeleteBicycleArgs } from "./DeleteBicycleArgs";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { Location } from "../../location/base/Location";
import { BicycleService } from "../bicycle.service";
@graphql.Resolver(() => Bicycle)
export class BicycleResolverBase {
  constructor(protected readonly service: BicycleService) {}

  async _bicyclesMeta(
    @graphql.Args() args: BicycleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bicycle])
  async bicycles(
    @graphql.Args() args: BicycleFindManyArgs
  ): Promise<Bicycle[]> {
    return this.service.bicycles(args);
  }

  @graphql.Query(() => Bicycle, { nullable: true })
  async bicycle(
    @graphql.Args() args: BicycleFindUniqueArgs
  ): Promise<Bicycle | null> {
    const result = await this.service.bicycle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bicycle)
  async createBicycle(
    @graphql.Args() args: CreateBicycleArgs
  ): Promise<Bicycle> {
    return await this.service.createBicycle({
      ...args,
      data: {
        ...args.data,

        location: args.data.location
          ? {
              connect: args.data.location,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Bicycle)
  async updateBicycle(
    @graphql.Args() args: UpdateBicycleArgs
  ): Promise<Bicycle | null> {
    try {
      return await this.service.updateBicycle({
        ...args,
        data: {
          ...args.data,

          location: args.data.location
            ? {
                connect: args.data.location,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bicycle)
  async deleteBicycle(
    @graphql.Args() args: DeleteBicycleArgs
  ): Promise<Bicycle | null> {
    try {
      return await this.service.deleteBicycle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Subscription], { name: "subscriptions" })
  async findSubscriptions(
    @graphql.Parent() parent: Bicycle,
    @graphql.Args() args: SubscriptionFindManyArgs
  ): Promise<Subscription[]> {
    const results = await this.service.findSubscriptions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Location, {
    nullable: true,
    name: "location",
  })
  async getLocation(
    @graphql.Parent() parent: Bicycle
  ): Promise<Location | null> {
    const result = await this.service.getLocation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
