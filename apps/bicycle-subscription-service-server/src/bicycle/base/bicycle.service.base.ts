/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Bicycle as PrismaBicycle,
  Subscription as PrismaSubscription,
  Location as PrismaLocation,
} from "@prisma/client";

export class BicycleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BicycleCountArgs, "select">): Promise<number> {
    return this.prisma.bicycle.count(args);
  }

  async bicycles<T extends Prisma.BicycleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BicycleFindManyArgs>
  ): Promise<PrismaBicycle[]> {
    return this.prisma.bicycle.findMany<Prisma.BicycleFindManyArgs>(args);
  }
  async bicycle<T extends Prisma.BicycleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BicycleFindUniqueArgs>
  ): Promise<PrismaBicycle | null> {
    return this.prisma.bicycle.findUnique(args);
  }
  async createBicycle<T extends Prisma.BicycleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BicycleCreateArgs>
  ): Promise<PrismaBicycle> {
    return this.prisma.bicycle.create<T>(args);
  }
  async updateBicycle<T extends Prisma.BicycleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BicycleUpdateArgs>
  ): Promise<PrismaBicycle> {
    return this.prisma.bicycle.update<T>(args);
  }
  async deleteBicycle<T extends Prisma.BicycleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BicycleDeleteArgs>
  ): Promise<PrismaBicycle> {
    return this.prisma.bicycle.delete(args);
  }

  async findSubscriptions(
    parentId: string,
    args: Prisma.SubscriptionFindManyArgs
  ): Promise<PrismaSubscription[]> {
    return this.prisma.bicycle
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subscriptions(args);
  }

  async getLocation(parentId: string): Promise<PrismaLocation | null> {
    return this.prisma.bicycle
      .findUnique({
        where: { id: parentId },
      })
      .location();
  }
}
